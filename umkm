import pandas as pd

file_path = r"D:\Posisi Kredit Usaha Mikro, Kecil, dan Menengah (UMKM) pada Bank Umum__, 2020-2022 (1).xlsx"  

df = pd.read_excel(file_path, sheet_name="belum diolah ", skiprows=4)
df.columns = ['Sektor Usaha', '2020', '2021', '2022', '2023']

df.head()
#########
import pandas as pd

file_path = r"D:\Posisi Kredit Usaha Mikro, Kecil, dan Menengah (UMKM) pada Bank Umum__, 2020-2022 (1).xlsx"  

df = pd.read_excel(file_path, sheet_name="belum diolah ", skiprows=4)
df.columns = ['Sektor Usaha', '2020', '2021', '2022', '2023']
# Tampilkan seluruh baris & kolom (tidak terpotong)
pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)

# Tampilkan dataframe
print(df)
##########
for year in ['2020', '2021', '2022', '2023']:
    df[year] = pd.to_numeric(df[year], errors='coerce')
df['Total'] = df[['2020', '2021', '2022', '2023']].sum(axis=1)
df['Growth (%)'] = ((df['2023'] - df['2020']) / df['2020']) * 100
print(df)
############
import matplotlib.pyplot as plt

plt.plot(['2020', '2021', '2022', '2023'], [530653, 601384, 656418, 686499], label='Perdagangan')
plt.plot(['2020', '2021', '2022', '2023'], [130012, 161456, 214198, 244970], label='Pertanian')

plt.title("Tren Kredit UMKM per Sektor (2020â€“2023)")
plt.xlabel("Tahun")
plt.ylabel("Nilai Kredit (Miliar Rp)")
plt.legend()
plt.grid(True)
plt.show()
#############
sektor = ['Perdagangan', 'Pertanian', 'Industri']
total_kredit = [2474954, 750636, 521568]

plt.bar(sektor, total_kredit, color='skyblue')
plt.title("Total Kredit UMKM 2020â€“2023 per Sektor")
plt.ylabel("Total Kredit (Miliar Rp)")
plt.show()
############
import numpy as np

tahun = ['2020', '2021', '2022', '2023']
pertanian = [130012, 161456, 214198, 244970]
perdagangan = [530653, 601384, 656418, 686499]

x = np.arange(len(tahun))
plt.bar(x, pertanian, label='Pertanian')
plt.bar(x, perdagangan, bottom=pertanian, label='Perdagangan')
plt.xticks(x, tahun)
plt.legend()
plt.title("Distribusi Kredit UMKM per Tahun")
plt.show()
############
# Hitung total kredit per sektor
top_sektor = df_long.groupby('Sektor')['Kredit'].sum().nlargest(10).index

# Filter hanya 10 sektor teratas
df_top = df_long[df_long['Sektor'].isin(top_sektor)]
sns.lineplot(data=df_top, x='Tahun', y='Kredit', hue='Sektor')
plt.xticks(rotation=0)
plt.title('Top 10 Sektor UMKM per Tahun')
plt.tight_layout()
plt.show()
###########
import matplotlib.pyplot as plt
import seaborn as sns

# Ambil 10 sektor dengan kredit terbesar
top_sektor = df_long.groupby('Sektor')['Kredit'].sum().nlargest(10).index
df_top = df_long[df_long['Sektor'].isin(top_sektor)]

# Plot
plt.figure(figsize=(12, 6))
sns.lineplot(data=df_top, x='Tahun', y='Kredit', hue='Sektor')
plt.xticks(rotation=0)
plt.title('Top 10 Sektor UMKM per Tahun')
plt.tight_layout()
plt.show()
###########
import matplotlib.pyplot as plt
import seaborn as sns

# Ambil 10 sektor dengan total kredit terbesar
top_sektor = df_long.groupby('Sektor')['Kredit'].sum().nlargest(10).index
df_top = df_long[df_long['Sektor'].isin(top_sektor)]

# Buat figure & plot
plt.figure(figsize=(12, 6))
ax = sns.lineplot(data=df_top, x='Tahun', y='Kredit', hue='Sektor', marker='o')

# Tambahkan label angka di setiap titik
for i in range(df_top.shape[0]):
    row = df_top.iloc[i]
    ax.text(
        x=row['Tahun'], 
        y=row['Kredit'], 
        s=f"{int(row['Kredit']):,}",  # format ribuan pakai koma
        fontsize=8,
        color='black',
        ha='center',
        va='bottom'
    )

# Format sumbu x dan judul
plt.xticks(rotation=0)
plt.title('Top 10 Sektor UMKM per Tahun (dengan nilai kredit)')
plt.tight_layout()
plt.show()
############
import matplotlib.pyplot as plt
import seaborn as sns

# Ambil 10 sektor kredit terbesar
top_sektor = df_long.groupby('Sektor')['Kredit'].sum().nlargest(10).index
df_top = df_long[df_long['Sektor'].isin(top_sektor)]

plt.figure(figsize=(12, 6))
ax = sns.lineplot(data=df_top, x='Tahun', y='Kredit', hue='Sektor', marker='o')

# Tambahkan angka di setiap titik
for i in range(df_top.shape[0]):
    row = df_top.iloc[i]
    ax.text(row['Tahun'], row['Kredit'], f"{int(row['Kredit']):,}", 
            fontsize=8, color='black', ha='center', va='bottom')

# Pindahkan legend ke bawah
plt.legend(loc='upper center', bbox_to_anchor=(0.5, -0.25), ncol=2)

plt.xticks(rotation=0)
plt.title('Top 10 Sektor UMKM per Tahun (dengan label kredit)')
plt.tight_layout()
plt.show()
##############
df_pivot = df_long.pivot(index='Tahun', columns='Sektor', values='Kredit')
df_growth = df_pivot.pct_change(fill_method=None).reset_index()
sns.heatmap(df_growth.set_index('Tahun') * 100, annot=True, fmt=".1f", cmap="YlGnBu")
############
import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize=(18, 10))  # Lebarkan agar tidak sempit
sns.heatmap(df_growth.set_index('Tahun'), 
            cmap='YlGnBu', 
            annot=True,         # âœ… Menampilkan angka
            fmt=".1f",           # Format angka: 1 angka di belakang koma
            annot_kws={"size": 8})  # Ukuran tulisan angka

plt.title("Pertumbuhan Kredit UMKM per Tahun per Sektor")
plt.xticks(rotation=90)  # Putar nama sektor agar tidak tumpang tindih
plt.yticks(rotation=0)
plt.tight_layout()
plt.show()
###########
df_growth_melt = df_growth.melt(id_vars='Tahun', var_name='Sektor', value_name='Growth')
print(df_growth_melt.sort_values('Growth', ascending=False).head())
total_kredit = df_long.groupby('Sektor')['Kredit'].sum().sort_values(ascending=False)
df_first = df_long[df_long['Tahun'] == '2020']
df_last = df_long[df_long['Tahun'] == '2023']

growth = pd.merge(df_first, df_last, on='Sektor', suffixes=('_2020', '_2023'))
growth['growth_pct'] = (growth['Kredit_2023'] - growth['Kredit_2020']) / growth['Kredit_2020'] * 100
total_kredit = df_long.groupby('Sektor', as_index=False)['Kredit'].sum()
total_kredit = total_kredit.sort_values('Kredit', ascending=False)
print(total_kredit)
###########
total_kredit = df_long.groupby('Sektor')['Kredit'].sum().sort_values(ascending=False)
print(total_kredit)
###########
import seaborn as sns
import matplotlib.pyplot as plt

# Urutkan berdasarkan total kredit
total_kredit = df_long.groupby('Sektor', as_index=False)['Kredit'].sum()
total_kredit = total_kredit.sort_values('Kredit', ascending=False)

# Plot
plt.figure(figsize=(12, 8))
ax = sns.barplot(data=total_kredit, x='Kredit', y='Sektor', palette='viridis')
plt.title('Total Kredit UMKM per Sektor (2020â€“2023)', fontsize=14)
plt.xlabel('Total Kredit')
plt.ylabel('Sektor')

# Tambahkan keterangan angka di ujung batang
for i in ax.containers:
    ax.bar_label(i, fmt='%.0f', padding=3)  # '%.0f' untuk membulatkan ke angka bulat

plt.tight_layout()
plt.show()
###########
# ðŸ“Œ Import pustaka
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# ðŸ“Œ Baca dan bersihkan data
df_raw = pd.read_excel (r"D:\Posisi Kredit Usaha Mikro, Kecil, dan Menengah (UMKM) pada Bank Umum__, 2020-2022 (1).xlsx" )
df_raw.columns = ['Sektor', '2020', '2021', '2022', '2023']
df_raw = df_raw[~df_raw['Sektor'].isna()]
df_raw = df_raw[df_raw['Sektor'] != 'Lapangan Usaha']

# ðŸ“Œ Transformasi long format
df_long = df_raw.melt(id_vars='Sektor', var_name='Tahun', value_name='Kredit')
df_long['Tahun'] = df_long['Tahun'].astype(int)
df_long['Kredit'] = pd.to_numeric(df_long['Kredit'], errors='coerce')

# ðŸ“Œ Hitung total kredit per sektor (2020â€“2023)
total_kredit_df = df_long.groupby('Sektor', as_index=False)['Kredit'].sum()

# ðŸ“Œ Hitung pertumbuhan YoY per sektor
df_sorted = df_long.sort_values(by=['Sektor', 'Tahun'])
df_sorted['Growth'] = df_sorted.groupby('Sektor')['Kredit'].pct_change() * 100

# ðŸ“Œ Hitung rata-rata pertumbuhan per sektor
growth_df = df_sorted.groupby('Sektor', as_index=False)['Growth'].mean().rename(columns={'Growth': 'Avg_Growth'})

# ðŸ“Œ Visualisasi pertumbuhan per sektor (heatmap)
heatmap_data = df_sorted.pivot(index='Sektor', columns='Tahun', values='Growth')
plt.figure(figsize=(12, 8))
sns.heatmap(heatmap_data, annot=True, fmt=".1f", cmap='RdYlGn', center=0)
plt.title('Pertumbuhan Kredit UMKM per Sektor (%)')
plt.xlabel('Tahun')
plt.ylabel('Sektor')
plt.tight_layout()
plt.show()

# ðŸ“Œ Gabungkan total kredit & growth untuk ranking
ranking_df = total_kredit_df.merge(growth_df, on='Sektor')
ranking_df['Kredit_rank'] = ranking_df['Kredit'].rank(ascending=False)
ranking_df['Growth_rank'] = ranking_df['Avg_Growth'].rank(ascending=False)
ranking_df['Final_score'] = (ranking_df['Kredit_rank'] + ranking_df['Growth_rank']) / 2
ranking_df = ranking_df.sort_values('Final_score')

# ðŸ“Œ Tampilkan top sektor
ranking_df.head(10)
###########
def classify_sector(row):
    if row['Kredit_rank'] <= 10 and row['Growth_rank'] <= 10:
        return 'Prioritas Tinggi'
    elif row['Kredit_rank'] <= 10:
        return 'Stabil Besar'
    elif row['Growth_rank'] <= 10:
        return 'Emerging (Potensial)'
    else:
        return 'Risiko / Anomali'

ranking_df['Kategori'] = ranking_df.apply(classify_sector, axis=1)
display(ranking_df.sort_values('Final_score'))
###########
cv_df = df_long.groupby('Sektor').agg(
    Kredit_Mean=('Kredit', 'mean'),
    Kredit_Std=('Kredit', 'std')
).reset_index()
cv_df['CV (%)'] = (cv_df['Kredit_Std'] / cv_df['Kredit_Mean']) * 100
display(cv_df.sort_values('CV (%)'))
###########
forecast_df = []

for sektor in df_long['Sektor'].unique():
    sub = df_long[df_long['Sektor'] == sektor]
    sub = sub.dropna(subset=['Tahun', 'Kredit'])  # Drop rows where either is NaN
    X = sub['Tahun'].values.reshape(-1, 1)
    y = sub['Kredit'].values

    if len(X) > 0 and len(y) > 0:  # Make sure there are still data points left
        model = LinearRegression().fit(X, y)
        pred_2024 = model.predict([[2024]])[0]
        forecast_df.append({'Sektor': sektor, 'Prediksi 2024': pred_2024})

forecast_2024 = pd.DataFrame(forecast_df)
display(forecast_2024.sort_values('Prediksi 2024', ascending=False))
###########
merged = ranking_df.merge(cv_df[['Sektor', 'CV (%)']], on='Sektor')
plt.figure(figsize=(12, 8))
sns.scatterplot(
    data=merged, x='Kredit', y='Avg_Growth', size='CV (%)', hue='Kategori', alpha=0.7, sizes=(100, 1000)
)
plt.title('Posisi Sektor UMKM: Kredit vs Pertumbuhan vs Risiko')
plt.xlabel('Total Kredit')
plt.ylabel('Rata-rata Pertumbuhan (%)')
plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()
###########

